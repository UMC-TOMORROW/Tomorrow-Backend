name: Docker CI/CD

on:
  push:
    branches: [ "develop" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout source code
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. Gradle permission
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. Gradle build
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean build -x test

      # 5. Docker login & build & push
      - name: Docker build and push to Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/tomorrow:latest -f docker/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/tomorrow:latest

      - name: Deploy on EC2 with Docker Compose (no .env)
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: 22
          script: |
            cd /home/***/Tomorrow-Backend
            git pull origin develop || { echo "Git pull failed"; exit 1; }

            cd docker

            # .env 파일이 존재하지 않으면 생성 (Bash 조건문 사용)
            if [ ! -f .env ]; then
              echo "SPRING_PROFILES_ACTIVE=${{ secrets.SPRING_PROFILES_ACTIVE }}" > .env
              echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
              echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
              echo "DEV_DATABASE_URL=${{ secrets.DEV_DATABASE_URL }}" >> .env
              echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
              echo "MAILNAME=${{ secrets.MAILNAME }}" >> .env
              echo "MAILPASSWORD=${{ secrets.MAILPASSWORD }}" >> .env
              echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
              echo "KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }}" >> .env
              echo "KAKAO_REST_SECRET=${{ secrets.KAKAO_REST_SECRET }}" >> .env
              echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> .env
              echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> .env
              echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
              echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
              echo "GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}" >> .env
              echo "DEV_REDIS_HOST=${{ secrets.DEV_REDIS_HOST }}" >> .env
              echo "DEV_REDIS_PASSWORD=${{ secrets.DEV_REDIS_PASSWORD }}" >> .env
            fi

            # Docker login and compose deployment
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

            docker-compose down
            docker-compose pull
            docker-compose up -d --build
